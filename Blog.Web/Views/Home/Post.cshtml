@using Markdig
@using Blog.Web.Areas.Admin.Auth
@using Blog.Web.Infrastructure
@model PostModel
@inject MarkdownPipeline markdownPipeline
@{
    ViewData["Title"] = @Model!.Title;

    string contentHtml = Markdown.ToHtml(Model.Content, markdownPipeline);
}

@inject SessionService sessionService;

@section styles {
    <link href="~/sass_compiled/post.css" rel="stylesheet" />
    <link rel="stylesheet" href="/highlight/styles/github.min.css">
}

@section scripts {
    <script src="/highlight/highlight.min.js"></script>
    <script>hljs.highlightAll();</script>
    <script>
        const content = document.querySelector('.content');
        const headings = content.querySelectorAll('h1,h2,h3,h4,h5,h6');

        const addAnchor = (el) => {
            const anchor = document.createElement('a');
            anchor.href = `#${el.id}`;
            anchor.innerHTML = '<i class="fa-solid fa-link"></i>';
            anchor.className = 'heading-anchor';
            el.insertBefore(anchor, el.firstChild);
        }

        headings.forEach(addAnchor);

        const codeWrappers = content.querySelectorAll('pre code');

        const addCopyToClipboard = (el) => {
            const copyBtn = document.createElement('a');
            copyBtn.href = '#';
            copyBtn.addEventListener('click',
                (e) => {
                    e.preventDefault();

                    navigator.clipboard.writeText(el.innerText.trim());
                    createToast('Copied to clipboard.');
                });
            copyBtn.className = 'copy-btn';
            copyBtn.innerText = 'Copy';
            el.parentElement.insertBefore(copyBtn, el);
        }

        codeWrappers.forEach(addCopyToClipboard);
    </script>
    <script>
        const commentWrapper = document.querySelector('.comment-wrapper');
        const createCommentWrapper = commentWrapper.querySelector('.create-comment-wrapper');
        const commentsWrapper = commentWrapper.querySelector('.comments');

        const isInViewport = (el) => {
            const rect = el.getBoundingClientRect();

            return (
                rect.top >= 0 &&
                    rect.left >= 0 &&
                    rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                    rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            );
        }

        const commentLoader = commentWrapper.querySelector('.comment-loader');

        let isLoadingComments = false;
        let loadedAllComments = false;
        let offset = 10;

        const loadCommentsIfNeeded = async () => {
            if (!isInViewport(commentLoader) || isLoadingComments || loadedAllComments) {
                return;
            }

            isLoadingComments = true;
            commentLoader.classList.remove('hide');

            const filter = {
                postId: @Model?.Id,
                offset: offset
            }

            const comments = await fetch(`/api/comment/get?${new URLSearchParams(filter)}`)
                .then(response => response.json())
                .catch(error => console.error(error));

            if (comments.length === 0) {
                loadedAllComments = true;
                isLoadingComments = false;
                commentLoader.classList.add('hide');
                return;
            }

            appendCommentsToPage(comments);

            offset += 10;

            isLoadingComments = false;
            commentLoader.classList.add('hide');
        }

        document.addEventListener('scroll', loadCommentsIfNeeded);

        const notScrollable = !(document.body.clientHeight > window.innerHeight);

        if (notScrollable) {
            loadCommentsIfNeeded();
        }

        const appendCommentsToPage = (comments) => {
            comments.forEach(comment => {
                const commentElement = document.createElement('div');
                commentElement.className = 'comment';
                commentElement.innerHTML =
                    `
            <div class="avatar">
                <img src="${comment["avatar_url"]}" alt="${comment["username"]}"/>
            </div>
            <div class="comment-body">
                <div class="user">
                    <span>${comment["username"]}</span>
                    <span class="created">${comment["human_date"]}</span>
                    ${comment["edited"] ? '<span>(edited)</span>' : ''}
                </div>
                <p>${comment["content"]}</p>
            </div>
            `;

                commentsWrapper.appendChild(commentElement);
            });
        }


        const addCommentToPage = (comment) => {
            const commentElement = document.createElement('div');
            commentElement.className = 'comment new';
            commentElement.innerHTML =
                `
            <div class="avatar">
                <img src="${comment["avatar_url"]}" alt="${comment["username"]}"/>
            </div>
            <div class="comment-body">
                <div class="user">
                    <span>${comment["username"]}</span>
                    <span class="created">${comment["human_date"]}</span>
                </div>
                <p>${comment["content"]}</p>
            </div>
            `;

            commentsWrapper.insertBefore(commentElement, commentsWrapper.firstElementChild);
        }

        const addReplyToPage = (comment, parentEl) => {
            const commentElement = document.createElement('div');
            commentElement.className = 'comment new';
            commentElement.innerHTML =
                `
            <div class="avatar">
                <img src="${comment["avatar_url"]}" alt="${comment["username"]}"/>
            </div>
            <div class="comment-body">
                <div class="user">
                    <span>${comment["username"]}</span>
                    <span class="created">${comment["human_date"]}</span>
                </div>
                <p>${comment["content"]}</p>
            </div>
            `;

            const childrenComments = parentEl.querySelector('.children.comments');

            if (!childrenComments) {
                const childrenCommentsEl = document.createElement('div');
                childrenCommentsEl.className = 'children comments';
                childrenCommentsEl.appendChild(commentElement);

                parentEl.appendChild(childrenCommentsEl);
                return;
            }

            childrenComments.appendChild(commentElement);
        }

        const commentInput = createCommentWrapper.querySelector('textarea');
        const commentCancelBtn = createCommentWrapper.querySelector('.cancel');

        const activeCreateCommentClass = 'active';

        commentCancelBtn.addEventListener('click',
            (e) => {
                e.preventDefault();

                createCommentWrapper.classList.remove(activeCreateCommentClass);
            });

        commentInput.addEventListener('focus',
            () => {
                createCommentWrapper.classList.add(activeCreateCommentClass);
            });

        const cleanCreateCommentFields = () => {
            commentInput.value = "";
        }

        const handleCommentResponse = (comment, parentEl) => {
            if (!parentEl) {
                addCommentToPage(comment);
            } else {
                addReplyToPage(comment, parentEl);
            }
            cleanCreateCommentFields();
            createToast('Successfully submitted a comment.');
        }

        const createComment = (content, parentId, parentEl) => {
            const comment = {
                content: content,
                postId: @Model?.Id,
                parentId: parentId
            };

            console.log(comment);


            fetch(`/api/comment/create?${new URLSearchParams(comment)}`,
                    {
                        method: 'POST'
                    })
                .then(response => response.json())
                .then(comment => handleCommentResponse(comment, parentEl))
                .catch(error => {
                    console.error(error);

                    createToast('Error, try again.');
                });
        }

        const commentBtn = createCommentWrapper.querySelector('.comment');

        commentBtn.addEventListener('click',
            (e) => {
                e.preventDefault();

                const commentContent = commentInput.value.trim();

                if (commentContent.length === 0) {
                    createToast('You can\'t comment nothing.');
                    return;
                }

                createComment(commentContent);
            });

        const replyToComment = (e) => {
            e.preventDefault();

            const commentEl = e.target.parentElement.parentElement.parentElement;

            const createCommentWrapperEl = document.createElement('div');
            createCommentWrapperEl.className = 'create-comment-wrapper active';
            commentEl.appendChild(createCommentWrapperEl);

            const avatarEl = document.createElement('div');
            avatarEl.className = 'avatar';
            avatarEl.innerHTML = '<img src="@sessionService?.Session?.UserAccount?.Avatar" alt="@sessionService?.Session?.UserAccount?.Username">';
            createCommentWrapperEl.appendChild(avatarEl);

            const createCommentEl = document.createElement('div');
            createCommentEl.className = 'create-comment';
            createCommentWrapperEl.appendChild(createCommentEl);

            const createCommentTextarea = document.createElement('textarea');
            createCommentTextarea.setAttribute('rows', '4');
            createCommentTextarea.setAttribute('placeholder', 'Add a comment...');
            createCommentEl.appendChild(createCommentTextarea);

            const actionsEl = document.createElement('div');
            actionsEl.className = 'actions';
            createCommentEl.appendChild(actionsEl);

            const cancelBtn = document.createElement('a');
            cancelBtn.className = 'cancel';
            cancelBtn.innerText = 'Cancel';
            cancelBtn.href = '#';
            cancelBtn.addEventListener('click', (cancelE) => {
                cancelE.preventDefault();

                createCommentWrapperEl.remove();
            });
            actionsEl.appendChild(cancelBtn);

            const commentBtn = document.createElement('a');
            commentBtn.className = 'comment';
            commentBtn.innerText = 'Comment';
            commentBtn.href = '#';
            commentBtn.addEventListener('click', (btnE) => {
                btnE.preventDefault();

                console.log(e);

                createComment(createCommentTextarea.value.trim(), Number(e.target.dataset.commentId), commentEl);
                createCommentWrapperEl.remove();
            });
            actionsEl.appendChild(commentBtn);
        }
    </script>
}

<main>
    <article>
        <header>
            <h1>@Model!.Title</h1>
            <div class="tags">
                @foreach (var tag in Model.Tags)
                {
                    <a asp-area="" asp-controller="Home" asp-action="Index" asp-route-tagId="@tag.TagId"
                        class="tag">@tag.Name</a>
                }
            </div>
            <div class="post-info">
                @if (Model.UpdatedOn.HasValue)
                {
                    <div>
                        <i class="far fa-clock"></i>
                        @(Model.UpdatedOn.Value.ToString("D"))
                    </div>
                }
            </div>
            @if (sessionService.Session.IsLoggedIn)
            {
                <div class="quick-access">
                    <a asp-area="Admin" asp-controller="Post" asp-action="Create">Create</a>
                    <a asp-area="Admin" asp-controller="Post" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
                </div>
            }
        </header>
        <div class="content">
            @Html.Raw(contentHtml)
        </div>
        <div class="comment-wrapper">
            <div class="create-comment-wrapper">
                @{
                    var currentUser = sessionService?.Session?.UserAccount;
                }
                
                @if (sessionService.Session.IsLoggedIn)
                {
                    <div class="avatar">
                        <img src="@currentUser?.Avatar" alt="@currentUser?.Username"/>
                    </div>
                    <div class="create-comment">
                        <textarea rows="4" placeholder="Add a comment..."></textarea>
                        <div class="actions">
                            <a href="#" class="cancel">Cancel</a>
                            <a href="#" class="comment">Comment</a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="login-required">You need to <a asp-area="Admin" asp-controller="Auth" asp-action="LoginPage">Log In</a> to comment.</div>
                }
            </div>
            <div class="comments">
                @foreach (var comment in Model.Comments)
                {
                    var commentUser = comment.User;

                    <div class="comment">
                        <div class="avatar">
                            <img src="@commentUser.AvatarUrl" alt="@commentUser.Name"/></div>
                        <div class="comment-body">
                            <div class="user">
                                <span>@commentUser.Name</span>
                                <span class="created">@DateUtils.DateTimeToLongAgo(comment.CreatedOn)</span>
                                @if (comment.Edited)
                                {
                                    <span class="edited">(edited)</span>
                                }
                            </div>
                            <p>@comment.Content</p>
                            <div class="actions">
                                @if (sessionService.Session.IsLoggedIn)
                                {
                                    <a class="reply" href="#" data-comment-id="@comment.CommentId" onclick="replyToComment(event);">Reply</a>
                                    @if (commentUser.UserId == sessionService.Session.UserAccount?.UserId)
                                    {
                                        <a class="edit" href="#">Edit</a>
                                    }
                                }
                            </div>
                        </div>
                        <div class="children comments">
                            @foreach (var childComment in comment.Children)
                            {
                                var childCommentUser = childComment.User;

                                <div class="comment">
                                    <div class="avatar">
                                        <img src="@childCommentUser.AvatarUrl" alt="@childCommentUser.Name"/></div>
                                    <div class="comment-body">
                                        <div class="user">
                                            <span>@childCommentUser.Name</span>
                                            <span class="created">@DateUtils.DateTimeToLongAgo(childComment.CreatedOn)</span>
                                            @if (childComment.Edited)
                                            {
                                                <span class="edited">(edited)</span>
                                            }
                                        </div>
                                        <p>@childComment.Content</p>
                                        <div class="actions">
                                            @if (sessionService.Session.IsLoggedIn)
                                            {
                                                <a class="reply" href="#" data-comment-id="@childComment.CommentId" onclick="replyToComment(event);">Reply</a>
                                                @if (childCommentUser.UserId == sessionService.Session.UserAccount?.UserId)
                                                {
                                                    <a class="edit" href="#">Edit</a>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="comment-loader hide">
                <i class="fa-solid fa-spinner"></i>
            </div>
        </div>
    </article>
</main>


