@using Markdig
@using Blog.Web.Areas.Admin.Auth
@model PostModel
@inject MarkdownPipeline markdownPipeline
@{
    ViewData["Title"] = @Model!.Title;

    string contentHtml = Markdown.ToHtml(Model.Content, markdownPipeline);
}

@inject SessionService sessionService;

@section styles {
    <link href="~/sass_compiled/post.css" rel="stylesheet" />
    <link rel="stylesheet" href="/highlight/styles/github.min.css">
}

@section scripts {
    <script src="/highlight/highlight.min.js"></script>
    <script>hljs.highlightAll();</script>
    <script>
        const content = document.querySelector('.content');
        const headings = content.querySelectorAll('h1,h2,h3,h4,h5,h6');

        const addAnchor = (el) => {
            const anchor = document.createElement('a');
            anchor.href = `#${el.id}`;
            anchor.innerHTML = '<i class="fa-solid fa-link"></i>';
            anchor.className = 'heading-anchor';
            el.insertBefore(anchor, el.firstChild);
        }

        headings.forEach(addAnchor);

        const codeWrappers = content.querySelectorAll('code');

        const addCopyToClipboard = (el) => {
            const copyBtn = document.createElement('a');
            copyBtn.href = '#';
            copyBtn.addEventListener('click',
                (e) => {
                    e.preventDefault();

                    navigator.clipboard.writeText(el.innerText.trim());
                    createToast('Copied to clipboard.');
                });
            copyBtn.className = 'copy-btn';
            copyBtn.innerText = 'Copy';
            el.parentElement.insertBefore(copyBtn, el);
        }

        codeWrappers.forEach(addCopyToClipboard);
    </script>
    <script>
    const createCommentWrapper = document.querySelector('.create-comment-wrapper');
    const commentsWrapper = document.querySelector('.comments');

    const addCommentToPage = (comment) => {
        const commentElement = document.createElement('div');
        commentElement.className = 'comment new';
        commentElement.innerHTML =
            `
            <div class="avatar">
                <img src="${comment["avatar_url"]}" alt="${comment["username"]}"/>
            </div>
            <div class="comment-body">
                <div class="user">${comment["username"]}</div>
                <div>${comment["content"]}</div>
            </div>
            `;

        commentsWrapper.insertBefore(commentElement, commentsWrapper.firstElementChild);
        }

        const commentInput = createCommentWrapper.querySelector('textarea');

        const cleanCreateCommentFields = () => {
            commentInput.value = "";
        }

        const handleCommentResponse = (comment) => {
            addCommentToPage(comment);
            cleanCreateCommentFields();
            createToast('Successfully submitted a comment.');
        }

        const createComment = (content, parentId) => {
            const comment = {
                content: content,
                postId: @Model?.Id,
                parentId: parentId
            };


            fetch(`/api/comment/create?${new URLSearchParams(comment)}`,
                    {
                        method: 'POST'
                    })
                .then(response => response.json())
                .then(handleCommentResponse)
                .catch(error => console.log('error', error));
        }

        const commentBtn = createCommentWrapper.querySelector('button');

        commentBtn.addEventListener('click',
            (e) => {
                e.preventDefault();

                createComment(commentInput.value.trim());
            });
    </script>
}

<main>
    <article>
        <header>
            <h1>@Model!.Title</h1>
            <div class="tags">
                @foreach (var tag in Model.Tags)
                {
                    <a asp-area="" asp-controller="Home" asp-action="Index" asp-route-tagId="@tag.TagId"
                        class="tag">@tag.Name</a>
                }
            </div>
            <div class="post-info">
                @if (Model.UpdatedOn.HasValue)
                {
                    <div>
                        <i class="far fa-clock"></i>
                        @(Model.UpdatedOn.Value.ToString("D"))
                    </div>
                }
            </div>
            @if (sessionService.Session.IsLoggedIn)
            {
                <div class="quick-access">
                    <a asp-area="Admin" asp-controller="Post" asp-action="Create">Create</a>
                    <a asp-area="Admin" asp-controller="Post" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
                </div>
            }
        </header>
        <div class="content">
            @Html.Raw(contentHtml)
        </div>
        <div class="comment-wrapper">
            <div class="create-comment-wrapper">
                @{
                    var currentUser = sessionService?.Session?.UserAccount;
                }
                <div class="avatar">
                    <img src="@currentUser?.Avatar" alt="@currentUser?.Username"/>
                </div>
                <div class="create-comment">
                    <textarea rows="4" placeholder="Add a comment..."></textarea>
                    <button>Comment</button>
                </div>
            </div>
            <div class="comments">
                @foreach (var comment in Model.Comments)
                {
                    var commentUser = comment.User;

                    <div class="comment">
                        <div class="avatar">
                            <img src="@commentUser.AvatarUrl" alt="@commentUser.Name"/></div>
                        <div class="comment-body">
                            <div class="user">@commentUser.Name</div>
                            <div>@comment.Content</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </article>
</main>


