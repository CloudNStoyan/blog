@using Blog.Web.Areas.Admin.Posts
@model Blog.Web.Areas.Admin.Posts.FilteredPostsModel

@{
    ViewData["Title"] = "All Posts";
}

@section styles
{
    <link rel="stylesheet" href="~/admin/css/posts.css"/>
}

@section footer {
    <script src="/admin/js/posts.js"></script>
}

<form asp-controller="Post" asp-action="All" method="get" class="list-wrapper">
    <input type="hidden" asp-for="Filter.Offset" value="@Model?.Filter?.Offset"/>
    <input type="hidden" asp-for="Filter.Limit" value="@Model?.Filter?.Limit"/>
    <input type="hidden" asp-for="Filter.OrderBy" value="@Model?.Filter?.OrderBy"/>
    <input type="hidden" asp-for="Filter.Sort" value="@Model?.Filter?.Sort"/>
    <h1 class="text-center">All Posts</h1>
    <div class="actions">
        <div class="filter-group">
            <input type="text" class="form-control" placeholder="Search"
                   asp-for="Filter.Search" value="@Model?.Filter?.Search"/>
            <button class="btn btn-rounded btn-info" type="submit">
                <i class="fa fa-search "></i>
            </button>
        </div>
        <div class="create-post">
            <a class="btn btn-primary create-post-btn" asp-controller="Post" asp-action="Create">Create<i class="fa fa-plus"></i></a>
        </div>
    </div>
    <table class="table table-striped table-dark table-bordered my-table">
        <caption>
            @($"Showing {Model.Posts.Length} ({Model.Filter.Offset} - {(Model.Filter.Offset + Model.Posts.Length)}) posts from {Model.PostsCount}")
        </caption>
        <thead class="thead-dark">
        <tr>
            <th class="order">
                <a href="#" data-order-by="Title" data-sort="@Model.Filter?.Sort"
                   class="@(Model.Filter.OrderBy == PostFilterOrderBy.Title ? "active" : "")">Title</a>
            </th>
            <th class="order">
                <a href="#" data-order-by="UpdatedOn" data-sort="@Model.Filter?.Sort"
                   class="@(Model.Filter.OrderBy == PostFilterOrderBy.UpdatedOn ? "active" : "")">Updated On</a>
            </th>
            <th class="order">
                <a href="#" data-order-by="CreatedOn" data-sort="@Model.Filter?.Sort"
                   class="@(Model.Filter.OrderBy == PostFilterOrderBy.CreatedOn ? "active" : "")">Created On</a>
            </th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var post in Model.Posts)
        {
            <tr>
                <td>@post.Title</td>
                <td>@post.UpdatedOn</td>
                <td>@post.CreatedOn</td>
                <td class="action-wrapper">
                    <div>
                        <a class="btn btn-info" asp-area="" asp-controller="Home" asp-action="Post" asp-route-id="@post.Id">View</a>
                        <a class="btn btn-warning" asp-controller="Post" asp-action="Edit" asp-route-id="@post.Id">Edit</a>
                        <a class="btn btn-danger" asp-controller="Post" asp-action="Delete" asp-route-id="@post.Id">Delete</a>
                    </div>
                </td>
            </tr>
        }
        </tbody>
        <tfoot>
        <tr>
            <th class="order">
                <a href="#" data-order-by="Title" data-sort="@Model.Filter?.Sort"
                   class="@(Model.Filter.OrderBy == PostFilterOrderBy.Title ? "active" : "")">Title</a>
            </th>
            <th class="order">
                <a href="#" data-order-by="UpdatedOn" data-sort="@Model.Filter?.Sort"
                   class="@(Model.Filter.OrderBy == PostFilterOrderBy.UpdatedOn ? "active" : "")">Updated On</a>
            </th>
            <th class="order">
                <a href="#" data-order-by="CreatedOn" data-sort="@Model.Filter?.Sort"
                   class="@(Model.Filter.OrderBy == PostFilterOrderBy.CreatedOn ? "active" : "")">Created On</a>
            </th>
            <th>Action</th>
        </tr>
        </tfoot>
    </table>
    @if (Model.Posts.Length < 1)
    {
        <div>No post were found please try to use less words or more specific ones.</div>
    }
    else
    {
        int maxPages = (int)Math.Ceiling((decimal)Model.PostsCount / Model.Filter.Limit);
        int currentPage = Model.Filter.Offset / Model.Filter.Limit + 1;

        bool hasNextPage = currentPage < maxPages;
        bool hasPreviousPage = currentPage > 1;

        int nextPage = currentPage + 1;
        int previousPage = currentPage - 1;

        <ul class="pagination">
            <li class="page-item @(hasPreviousPage ? "" : "disabled")" data-page="@previousPage">
                <a class="page-link" href="#">Previous</a>
            </li>
            @for (int i = 5; i >= 1; i--)
            {
                int paginationPage = currentPage - i;

                if (paginationPage < 1)
                {
                    continue;
                }

                <li class="page-item" data-page="@paginationPage">
                    <a class="page-link" href="#">@paginationPage</a>
                </li>
            }
            <li class="page-item active">
                <span class="page-link">@currentPage</span>
            </li>
            
            @for (int i = 0; i < 5; i++)
            {
                int paginationPage = currentPage + (i + 1);

                if (paginationPage > maxPages)
                {
                    continue;
                }

                <li class="page-item" data-page="@paginationPage">
                    <a class="page-link" href="#">@paginationPage</a>
                </li>
            }
            <li class="page-item @(hasNextPage ? "" : "disabled")" data-page="@nextPage">
                <a class="page-link" href="#">Next</a>
            </li>
        </ul>
    }
</form>